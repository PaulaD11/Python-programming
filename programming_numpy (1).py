# -*- coding: utf-8 -*-
"""Programming Numpy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rPGRCr9dB9eybf2i5fNIZd-4PMvTmznN
"""

import numpy as np

#Creo una lista (una única columna)
lista=[31, 28, 29, 19]
#Convierto la lista en array de numpy
arr=np.array(lista)

#Creo lista multidimensional, múltiples columnas
lista_2d=[[2,3,4],
          [4,5,6],
          [7,8,9],
          [4,5,6]]
#Convierto la lista anterior en array multidimensional
arr_2d=np.array(lista_2d)

#Hallar las dimensiones del array (filas, columnas)
arr_2d.shape

#Hallar las dimensiones del array, 1d es 1 columna, 2d son varias columnas
arr_2d.ndim

#Hallar el tipo de datos del array
arr_2d.dtype

#Hallar el tamaño del array
arr_2d.size

#Crear un array de zeros
np.zeros((3,2))
#Crear un array de unos
np.ones((3,3))
#Crear una matriz vacía
np.empty((4,3))

#Crear un array con los valores del 1 al 9, 10 posiciones
arrr=np.arange(10)

#Dar nueva forma a un array, en términos de filas y columnas
arrr.reshape(2,5)

#Crear una secuencia de números, por ejemplo, de 2 en 2
np.arange(10,20,2)

#Crear una secuencia de números, de acuerdo al rango y a la cantidad de números solicitados, en este caso 11
np.linspace(10,20,11)

#Crear dos array aleatorios para sumarlos posteriormente
a=np.linspace(10,20,6)
b=np.linspace(5,25,6)
print(a,b)

#Suma de array
a+b

#Unir/Concatenar los array A y B
c=np.concatenate((a,b))
print(c)

#Ordenar de manera ascendente los valores del Array C
c.sort()
print(c)

#Ordenar de manera descendente los valores del Array C
d=-np.sort(-c)
print(d)

#Hallar el mínimo
min(c)
#Hallar el máximo
max(c)
#Hallar el promedio
c.mean()
#Hallar la desviación estándar
c.std()
#Calcular la suma
c.sum()

#Creamos una matriz aleatoria para calcular sus medidas estadísticas principalespor cada COLUMNA
rg=np.random.default_rng(52)
estadísticos= rg.integers(20, size=(5,4))
print(estadísticos)

estadísticos.min(axis=0)
estadísticos.max(axis=0)
estadísticos.mean(axis=0)
estadísticos.std(axis=0)
estadísticos.sum(axis=0)

#Creamos una matriz aleatoria para calcular sus medidas estadísticas principalespor cada FILA
rg=np.random.default_rng(52)
estadísticos= rg.integers(20, size=(5,4))
print(estadísticos)

estadísticos.min(axis=1)
estadísticos.max(axis=1)
estadísticos.mean(axis=1)
estadísticos.std(axis=1)
estadísticos.sum(axis=1)

#Hallamos los valores menores a 12
estadísticos[estadísticos<12]
#Hallamos los valores mayores a 12
estadísticos[estadísticos>12]
#Hallamos los valores entre 10 y 15
estadísticos_2 = estadísticos[np.logical_and(estadísticos>8, estadísticos<19)]
#Usamos una condición con OR
estadísticos_3 = estadísticos[np.logical_or(estadísticos>8, estadísticos<19)]

#Creamos dos array aleatorios y los unimos verticalmente
np1=rg.integers(20,size=(3,3))
np2=rg.integers(20,size=(3,3))
vertical=np.vstack((np1,np2))
print(vertical)

#Creamos dos array aleatorios y los unimos horizontalmente
np3=rg.integers(20,size=(3,3))
np4=rg.integers(20,size=(3,3))
horizontal=np.hstack((np3,np4))
print(horizontal)

#Creamos una lista aleatoria y seleccionamos los primeros 6 valores
enteros=rg.integers(20,size=(10))
enteros[0:6]

#Seleccionar los valores en la posición 0, 2 y 4
enteros[0:6:2]

#Seleccionar todos los valores con un índice par
enteros[::2]

#Creamos un array (8,5), 8 filas y 5 columnas. Seleccionamos el valor de la segunda fila, cuarta columna
enteros_2=rg.integers(20,size=(8,5))
print(enteros_2)
enteros_2[1,3]

#Seleccionar en las filas de la 4 a la 6 los valores de la columna 2
enteros_2[3:6,1]

#Seleccionar las filas 5, 6, 7 y las columnas 1 y 2
enteros_2[4:7,0:2]

#Añadir al array enteros_2 una fila nueva
enteros_3=np.append(enteros_2,[[2,9,11,5,7]], axis=0)
print(enteros_3)

#Añadir al array enteros_2 una columna nueva
enteros_4=np.append(enteros_2,[[2],[9],[11],[5],[7],[4],[5],[1]], axis=1)
print(enteros_4)

#Creamos un array aleatorio y lo transponemos
ss=rg.integers(50,size=(5,27))
print(ss)

ss_2=ss.transpose()
print(ss_2)

#Seleccionamos todo el rango de registros de la columna 2 de la matriz transpuesta
ss_2[0:27,1]